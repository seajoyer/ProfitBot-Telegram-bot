#-*- coding: utf-8 -*-
import telebot
import random
import mysql.connector
import os
import base64
import asyncio
import datetime
from time import sleep
from telebot import types
import configparser
import pickle
import time
from telethon import events
from telethon import TelegramClient, events, sync
from telethon.tl.functions.messages import GetHistoryRequest
from telethon import connection

import cherrypy
import config

WEBHOOK_HOST = '212.86.115.80'
WEBHOOK_PORT = 443
WEBHOOK_LISTEN = '0.0.0.0'

WEBHOOK_SSL_CERT = '/home/Dmitry/upload/ProfitBot/webhook_cert.pem'
WEBHOOK_SSL_PRIV = '/home/Dmitry/upload/ProfitBot/webhook_pkey.pem'

WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % (config.token)

bot = telebot.TeleBot(config.token)

users = {}

class WebhookServer(object):
    @cherrypy.expose
    def index(self):
        if 'content-length' in cherrypy.request.headers and \
                        'content-type' in cherrypy.request.headers and \
                        cherrypy.request.headers['content-type'] == 'application/json':
            length = int(cherrypy.request.headers['content-length'])
            json_string = cherrypy.request.body.read(length).decode("utf-8")
            update = telebot.types.Update.de_json(json_string)
            # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.process_new_updates([update])
            return ''
        else:
            raise cherrypy.HTTPError(403)

db = mysql.connector.connect(host='localhost', database='ProfitBot', user='user', password='88password04')
cursor = db.cursor()

qw = "SELECT distinct `user_id` FROM `users` where `user_id` = 653376416"
cursor.execute(qw)
result = cursor.fetchall()
if len(result) == 0:
    qw = """INSERT INTO `ProfitBot`.`users` (`id`, `user_id`, `status`, `msg_id1`, `msg_id2`) VALUES( NULL, 653376416, 'owner', 0, 0)"""
    cursor.execute(qw)
    db.commit()
else:
    qw = """UPDATE `users` SET `status` = 'owner'  WHERE `user_id` = 653376416"""
    cursor.execute(qw)
    db.commit()

qw = "SELECT distinct `user_id` FROM `users`"
cursor.execute(qw)
result = cursor.fetchall()
for item in result:
    qw = "SELECT distinct `status` FROM `users` WHERE `user_id` = %d"%(item)
    cursor.execute(qw)
    status = cursor.fetchall()[0][0]
    qw = "SELECT distinct `msg_id1` FROM `users` WHERE `user_id` = %d"%(item)
    cursor.execute(qw)
    msg_id1 = cursor.fetchall()[0][0]
    qw = "SELECT distinct `msg_id2` FROM `users` WHERE `user_id` = %d"%(item)
    cursor.execute(qw)
    msg_id2 = cursor.fetchall()[0][0]

    users[item[0]] = {'action': '', 'status': status, 'msg_id1' : msg_id1, 'msg_id2': msg_id2, 'distribution': {'action': '', 'text': '', 'picture': '', 'buttons': '', 'success': 0, 'fail': 0}}


before = datetime.datetime.now() - datetime.timedelta(seconds = 30)

async def wait_time(time):
    await asyncio.sleep(time)

def get_stat(price, type):
    if os.stat("/home/Dmitry/upload/ProfitBot/channel_messages.pickle").st_size == 0:

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(wait_time(2))
        loop.close()

    with open('/home/Dmitry/upload/ProfitBot/channel_messages.pickle', 'rb') as outfile:
        all_messages = pickle.load(outfile)

    result = {'female_goro': '', 'male_goro': '', 'female_facts': '', 'male_facts': ''}   # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    total_messages = 10
    total_count_limit = 8  # –ø–æ–º–µ–Ω—è–π—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã –Ω–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        result['male_facts'] = all_messages[0].split(' ')
    except:
        result['male_facts'] = '–æ—à–∏–±–∫–∞'
    try:
        result['female_goro'] = all_messages[1].split(' ')
    except:
        result['female_goro'] = '–æ—à–∏–±–∫–∞'
    try:
        result['male_goro'] = all_messages[2].split(' ')
    except:
        result['male_goro'] = '–æ—à–∏–±–∫–∞'
    try:
        result['female_facts'] = all_messages[3].split(' ')
    except:
        result['female_facts'] = '–æ—à–∏–±–∫–∞'

    res = {'female_goro_cov': [], 'male_goro_cov': [], 'female_facts_cov': [], 'male_facts_cov': [], 'female_goro_per': [], 'male_goro_per': [], 'female_facts_per': [], 'male_facts_per': []}

    for i in result['female_facts']:
        if i.find('\n–ü–¥–ø') != -1:
            res['female_facts_cov'].append(int(i.replace('\n–ü–¥–ø', '').replace("'", '')))

    for i in result['male_facts']:
        if i.find('\n–ü–¥–ø') != -1:
            res['male_facts_cov'].append(int(i.replace('\n–ü–¥–ø', '').replace("'", '')))

    for i in result['female_goro']:
        if i.find('\n–ü–¥–ø') != -1:
            res['female_goro_cov'].append(int(i.replace('\n–ü–¥–ø', '').replace("'", '')))

    for i in result['male_goro']:
        if i.find('\n–ü–¥–ø') != -1:
            res['male_goro_cov'].append(int(i.replace('\n–ü–¥–ø', '').replace("'", '')))

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    for i, item in enumerate(result['female_facts']):
        if result['female_facts'][result['female_facts'].index(item)-1] == '\nüë•:':
            res['female_facts_per'].append(int(item.replace(',', '').replace("'", '')))

    for i, item in enumerate(result['male_facts']):
        if result['male_facts'][result['male_facts'].index(item)-1] == '\nüë•:':
            res['male_facts_per'].append(int(item.replace(',', '').replace("'", '')))

    for i, item in enumerate(result['female_goro']):
        if result['female_goro'][result['female_goro'].index(item)-1] == '\nüë•:':
            res['female_goro_per'].append(int(item.replace(',', '').replace("'", '')))

    for i, item in enumerate(result['male_goro']):
        if result['male_goro'][result['male_goro'].index(item)-1] == '\nüë•:':
            res['male_goro_per'].append(int(item.replace(',', '').replace("'", '')))



    if res['female_facts_per'].count(0) != 0:
        res['female_facts_per'] = int(round(sum(res['female_facts_per'])/(12-res['female_facts_per'].count(0))*res['female_facts_per'].count(0) + sum(res['female_facts_per']), 0))
    else:
        res['female_facts_per'] = sum(res['female_facts_per'])

    if res['male_facts_per'].count(0) != 0:
        res['male_facts_per'] = int(round(sum(res['male_facts_per'])/(12-res['male_facts_per'].count(0))*res['male_facts_per'].count(0) + sum(res['male_facts_per']), 0))
    else:
        res['male_facts_per'] = sum(res['male_facts_per'])

    if res['female_goro_per'].count(0) != 0:
        res['female_goro_per'] = int(round(sum(res['female_goro_per'])/(12-res['female_goro_per'].count(0))*res['female_goro_per'].count(0) + sum(res['female_goro_per']), 0))
    else:
        res['female_goro_per'] = sum(res['female_goro_per'])

    if res['male_goro_per'].count(0) != 0:
        res['male_goro_per'] = int(round(sum(res['male_goro_per'])/(12-res['male_goro_per'].count(0))*res['male_goro_per'].count(0) + sum(res['male_goro_per']), 0))
    else:
        res['male_goro_per'] = sum(res['male_goro_per'])



    if res['female_facts_cov'].count(0) != 0:
        res['female_facts_cov'] = int(round(sum(res['female_facts_cov'])/(12-res['female_facts_cov'].count(0))*res['female_facts_cov'].count(0) + sum(res['female_facts_cov']), 0))
    else:
        res['female_facts_cov'] = sum(res['female_facts_cov'])

    if res['male_facts_cov'].count(0) != 0:
        res['male_facts_cov'] = int(round(sum(res['male_facts_cov'])/(12-res['male_facts_cov'].count(0))*res['male_facts_cov'].count(0) + sum(res['male_facts_cov']), 0))
    else:
        res['male_facts_cov'] = sum(res['male_facts_cov'])

    if res['female_goro_cov'].count(0) != 0:
        res['female_goro_cov'] = int(round(sum(res['female_goro_cov'])/(12-res['female_goro_cov'].count(0))*res['female_goro_cov'].count(0) + sum(res['female_goro_cov']), 0))
    else:
        res['female_goro_cov'] = sum(res['female_goro_cov'])

    if res['male_goro_cov'].count(0) != 0:
        res['male_goro_cov'] = int(round(sum(res['male_goro_cov'])/(12-res['male_goro_cov'].count(0))*res['male_goro_cov'].count(0) + sum(res['male_goro_cov']), 0))
    else:
        res['male_goro_cov'] = sum(res['male_goro_cov'])

    if type == 'stat':
        try:
            statistic = '–æ–±–Ω–æ–≤–ª–µ–Ω–æ <code>' + datetime.datetime.now().strftime("%d.%m.%y %H:%M") + '</code>' + '<u>\n–°–µ—Ç–∫–∞ –§–∞–∫—Ç–æ–≤ –ø–æ –∑–Ω–∞–∫–∞–º –ó–æ–¥–∏–∞–∫–∞:</u>\n     <code>–ú –¶–ê</code>\n         üëÅ: <b>%d</b>\n         üë•: <b>%d</b>\n         <code>ERR</code>: <b>%d&#37;</b>\n     <code>–ñ –¶–ê</code>\n         üëÅ: <b>%d</b>\n         üë•: <b>%d</b>\n         <code>ERR</code>: <b>%d&#37;</b>\n|   <code>–ú—Ü–∞+–ñ—Ü–∞:</code>\n|       üëÅ: <b>%d</b>\n|       üë•: <b>%d</b>\n|       <code>ERR</code>: <b>%d&#37;</b>\n<u>–°–µ—Ç–∫–∞ –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤:</u>\n     <code>–ú –¶–ê</code>\n         üëÅ: <b>%d</b>\n         üë•: <b>%d</b>\n         <code>ERR</code>: <b>%d&#37;</b>\n     <code>–ñ –¶–ê</code>\n         üëÅ: <b>%d</b>\n         üë•: <b>%d</b>\n         <code>ERR</code>: <b>%d&#37;</b>\n|   <code>–ú—Ü–∞+–ñ—Ü–∞:</code>\n|       üëÅ: <b>%d</b>\n|       üë•: <b>%d</b>\n|       <code>ERR</code>: <b>%d&#37;</b>\n\n<u>–í—Å—ë –≤–º–µ—Å—Ç–µ:</u>\n| üëÅ: <b>%d</b>\n| üë•: <b>%d</b>\n| <code>ERR</code>: <b>%d&#37;</b>'%(res['male_facts_cov'], res['male_facts_per'], int(round(res['male_facts_cov']/res['male_facts_per']*100, 0)), res['female_facts_cov'], res['female_facts_per'], int(round(res['female_facts_cov']/res['female_facts_per']*100, 0)), res['male_facts_cov']+res['female_facts_cov'], res['male_facts_per']+res['female_facts_per'], int(round((res['male_facts_cov']+res['female_facts_cov'])/(res['male_facts_per']+res['female_facts_per'])*100, 0)), res['male_goro_cov'], res['male_goro_per'], int(round(res['male_goro_cov']/res['male_goro_per']*100, 0)), res['female_goro_cov'], res['female_goro_per'], int(round(res['female_goro_cov']/res['female_goro_per']*100, 0)), res['male_goro_cov']+res['female_goro_cov'], res['male_goro_per']+res['female_goro_per'], int(round((res['male_goro_cov']+res['female_goro_cov'])/(res['male_goro_per']+res['female_goro_per'])*100, 0)), res['male_goro_cov']+res['female_goro_cov'] + res['male_facts_cov']+res['female_facts_cov'], res['male_goro_per']+res['female_goro_per'] + res['male_facts_per']+res['female_facts_per'], int(round((res['male_goro_cov']+res['female_goro_cov'] + res['male_facts_cov']+res['female_facts_cov'])/(res['male_goro_per']+res['female_goro_per'] + res['male_facts_per']+res['female_facts_per'])*100)))

            return(statistic)
        except:
            return('‚ö†Ô∏è–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥')
    elif type == 'price':
        try:
            res_price = str(price) + ' CPM<u>\n–°–µ—Ç–∫–∞ –§–∞–∫—Ç–æ–≤ –ø–æ –∑–Ω–∞–∫–∞–º –ó–æ–¥–∏–∞–∫–∞:</u>\n     <code>–ú –¶–ê = </code><b>%d</b>\n     <code>–ñ –¶–ê = </code><b>%d</b>\n     <code>–ú—Ü–∞+–ñ—Ü–∞ = </code><b>%d</b>\n<u>–°–µ—Ç–∫–∞ –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤:</u>\n     <code>–ú –¶–ê = </code><b>%d</b>\n     <code>–ñ –¶–ê = </code><b>%d</b>\n     <code>–ú—Ü–∞+–ñ—Ü–∞ = </code><b>%d</b>\n\n<u>–í—Å—ë –≤–º–µ—Å—Ç–µ</u> = <b>%d</b>'%(res['male_facts_cov']/1000*price, res['female_facts_cov']/1000*price, (res['male_facts_cov']+res['female_facts_cov'])/1000*price, res['male_goro_cov']/1000*price, res['female_goro_cov']/1000*price, (res['male_goro_cov']+res['female_goro_cov'])/1000*price, (res['male_facts_cov']+res['female_facts_cov'] + res['male_goro_cov']+res['female_goro_cov'])/1000*price)
            return(res_price)
        except:
            return('‚ö†Ô∏è–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥')






@bot.message_handler(commands=['start'])
def trusted(message):
    global users
    if message.chat.id not in users.keys():
        qw = "SELECT distinct `user_id` FROM `users` where `user_id` = %d"%(message.chat.id)
        cursor.execute(qw)
        result = cursor.fetchall()
        if len(result) != 0:
            qw = "SELECT distinct `status` FROM `users` WHERE `user_id` = %d"%(message.chat.id)
            cursor.execute(qw)
            status = cursor.fetchall()[0][0]
            qw = "SELECT distinct `msg_id1` FROM `users` WHERE `user_id` = %d"%(message.chat.id)
            cursor.execute(qw)
            msg_id1 = cursor.fetchall()[0][0]
            qw = "SELECT distinct `msg_id2` FROM `users` WHERE `user_id` = %d"%(message.chat.id)
            cursor.execute(qw)
            msg_id2 = cursor.fetchall()[0][0]

            users[message.chat.id] = {'action': '', 'status': status, 'msg_id1': msg_id1, 'msg_id2': msg_id2, 'distribution': {'action': '', 'text': '', 'picture': '', 'buttons': '', 'success': 0, 'fail': 0}}
        else:
            qw = """INSERT INTO `ProfitBot`.`users` (`id`, `user_id`, `msg_id1`, `msg_id2`) VALUES( NULL, %d, 0, 0)""" %(message.chat.id)
            cursor.execute(qw)
            db.commit()
            users[message.chat.id] = {'action': '', 'status': 'member', 'msg_id1': 0, 'msg_id2': 0, 'distribution': {'action': '', 'text': '', 'picture': '', 'buttons': '', 'success': 0, 'fail': 0}}

    key = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.row('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–°—Ç–æ–∏–º–æ—Å—Ç—å')
    if users[message.chat.id]['status'] == 'owner' or users[message.chat.id]['status'] == 'admin':
        key.row('–ê–¥–º–∏–Ω–∫–∞')
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö:\n@vp_reklama_goro\n@vp_reklama_facts\n–ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - @kristyday', reply_markup = key)


@bot.message_handler(func=lambda c:True, content_types=['text'])
def info_message(message):
    global users
    if message.chat.id not in users.keys():
        qw = "SELECT distinct `user_id` FROM `users` where `user_id` = %d"%(message.chat.id)
        cursor.execute(qw)
        result = cursor.fetchall()
        if len(result) != 0:
            qw = "SELECT distinct `status` FROM `users` WHERE `user_id` = %d"%(message.chat.id)
            cursor.execute(qw)
            status = cursor.fetchall()[0][0]
            qw = "SELECT distinct `msg_id1` FROM `users` WHERE `user_id` = %d"%(message.chat.id)
            cursor.execute(qw)
            msg_id1 = cursor.fetchall()[0][0]
            qw = "SELECT distinct `msg_id2` FROM `users` WHERE `user_id` = %d"%(message.chat.id)
            cursor.execute(qw)
            msg_id2 = cursor.fetchall()[0][0]

            users[message.chat.id] = {'action': '', 'status': status, 'msg_id1': msg_id1, 'msg_id2': msg_id2, 'distribution': {'action': '', 'text': '', 'picture': '', 'buttons': '', 'success': 0, 'fail': 0}}

        else:
            qw = """INSERT INTO `ProfitBot`.`users` (`id`, `user_id`, `msg_id1`, `msg_id2`) VALUES( NULL, %d, 0, 0)""" %(message.chat.id)
            cursor.execute(qw)
            db.commit()
            users[message.chat.id] = {'action': '', 'status': 'member', 'msg_id1' : 0, 'msg_id2' : 0, 'distribution': {'action': '', 'text': '', 'picture': '', 'buttons': '', 'success': 0, 'fail': 0}}

    if message.text == '‚ö°Ô∏è–ú–û–õ–û–¢ –¢–û–†–ê‚ö°Ô∏è' and users[message.chat.id]['status'] == 'owner':
        key = types.InlineKeyboardMarkup()
        but_1 = types.InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞",callback_data="Set_admin")
        but_2 = types.InlineKeyboardButton(text="–£–≤–æ–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞",callback_data="Lay_off_admin")
        but_3 = types.InlineKeyboardButton(text="—Å–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",callback_data="Adm_list")
        key.add(but_1, but_2)
        key.add(but_3)
        users[message.chat.id]['msg_id1'] = bot.send_message(message.chat.id, '–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?', reply_markup = key).message_id
        qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
        cursor.execute(qw)
        db.commit()

    if users[message.chat.id]['action'] == 'Lay_off_admin' and users[message.chat.id]['status'] == 'owner':
        if message.text.isdigit() and len(message.text) > 4:
            qw = "SELECT distinct `user_id` FROM `users` WHERE `user_id` = %d"%(int(message.text))
            cursor.execute(qw)
            result = cursor.fetchall()
            if len(result) == 0:
                key = types.InlineKeyboardMarkup()
                but_1 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
                key.add(but_1)
                bot.send_message(message.chat.id, '–£–≤—ã, –Ω–æ —Ç–∞–∫–æ–≥–æ —É –Ω–∞—Å –Ω–µ—Ç(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', reply_markup = key)
            else:
                qw = """UPDATE `users` SET `status` = 'member'  WHERE `user_id` = %d """ %(int(message.text))
                cursor.execute(qw)
                db.commit()
                bot.send_message(message.chat.id, str(message.text) + ' —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.')
                users[message.chat.id]['action'] = ''

    if users[message.chat.id]['action'] == 'Set_admin' and users[message.chat.id]['status'] == 'owner':
        if message.text.isdigit() and len(message.text) > 4:
            qw = "SELECT distinct `user_id` FROM `users` WHERE `user_id` = %d"%(int(message.text))
            cursor.execute(qw)
            result = cursor.fetchall()
            if len(result) == 0:
                key = types.InlineKeyboardMarkup()
                but_1 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
                key.add(but_1)
                bot.send_message(message.chat.id, '–£–≤—ã, –Ω–æ —Ç–∞–∫–æ–≥–æ —É –Ω–∞—Å –Ω–µ—Ç(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', reply_markup = key)
            else:
                key = types.InlineKeyboardMarkup()
                but_1 = types.InlineKeyboardButton(text="–Ω–∞–∑–Ω–∞—á–∏—Ç—å!",callback_data="Upgrade_admin" + str(message.text))
                but_2 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
                key.add(but_1, but_2)
                users[message.chat.id]['msg_id1'] = bot.send_message(message.chat.id, '–£–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º <code>%s</code>?'%(message.text), parse_mode = 'HTML', reply_markup = key).message_id

    if message.text == '–Ω–∞–∑–∞–¥':
        users[message.chat.id]['action'] = ''
        key = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        key.row('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–°—Ç–æ–∏–º–æ—Å—Ç—å')
        if users[message.chat.id]['status'] == 'owner' or users[message.chat.id]['status'] == 'admin':
            key.row('–ê–¥–º–∏–Ω–∫–∞')
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = key)

    if message.text == '–†–∞—Å—Å—ã–ª–∫–∞' and users[message.chat.id]['status'] == 'owner' and users[message.chat.id]['action'] == '' or message.text == '–†–∞—Å—Å—ã–ª–∫–∞' and users[message.chat.id]['status'] == 'admin' and users[message.chat.id]['action'] == '':
        users[message.chat.id]['distribution']['action'] = ''
        key = types.InlineKeyboardMarkup()
        but_1 = types.InlineKeyboardButton(text="–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç",callback_data="ADMText")
        but_2 = types.InlineKeyboardButton(text="–° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π",callback_data="ADMPhoto")
        but_3 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
        key.add(but_1, but_2)
        key.add(but_3)
        users[message.chat.id]['msg_id1'] = bot.send_message(message.chat.id, '–¢–∏–ø –ø–æ—Å—Ç–∞:', reply_markup=key).message_id
        qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
        cursor.execute(qw)
        db.commit()

    if users[message.chat.id]['status'] == 'owner' and users[message.chat.id]['distribution']['action'] == 'Check_buttons' or users[message.chat.id]['status'] == 'admin' and users[message.chat.id]['distribution']['action'] == 'Check_buttons':
        try:
            bot.edit_message_reply_markup(message.chat.id, users[message.chat.id]['msg_id1'], reply_markup = '')
        except:
            pass
        names = []
        urls = []

        if users[message.chat.id]['distribution']['buttons'] == '' and users[message.chat.id]['distribution']['buttons'] != 'None':
            users[message.chat.id]['distribution']['buttons'] = message.text
            try:
                for pare in users[message.chat.id]['distribution']['buttons'].split('\n'):
                    names.append(pare.split(' - ')[0]) #–Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏
                    urls.append(pare.split(' - ')[1]) #–Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏
                    key = types.InlineKeyboardMarkup()
                    key2 = types.InlineKeyboardMarkup()
                    for name, url in zip(names, urls):
                        key.add(types.InlineKeyboardButton(text = name, url = url))
                    key2.add(types.InlineKeyboardButton('–û–¢–ü–†–ê–í–ò–¢–¨', callback_data = 'ADMSend'))
                    key2.add(types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data = "ADMStop"))

                if users[message.chat.id]['distribution']['picture'] == '':
                    bot.send_message(message.chat.id, text = str(users[message.chat.id]['distribution']['text']), parse_mode = 'HTML', reply_markup=key)
                else:
                    bot.send_photo(message.chat.id, photo = users[message.chat.id]['distribution']['picture'] ,caption = str(users[message.chat.id]['distribution']['text']), parse_mode = 'HTML', reply_markup=key)

                users[message.chat.id]['msg_id1'] = bot.reply_to(message, text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞?', reply_markup=key2).message_id
                qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
                cursor.execute(qw)
                db.commit()
                users[message.chat.id]['distribution']['action'] = ''

            except Exception as e:
                bot.send_message(message.chat.id, '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n\n<code>' + str(e) + '</code>\n\n–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞–Ω—ã –≤–µ—Ä–Ω–æ, —Å–æ–æ–±—â–∏ @Garison_777', parse_mode = 'HTML')
                users[message.chat.id]['distribution']['buttons'] = ''

        elif users[message.chat.id]['distribution']['buttons'] == 'None':
            try:
                bot.edit_message_reply_markup(message.chat.id, users[message.chat.id]['msg_id1'], reply_markup = '')
            except:
                pass
            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="–û–¢–ü–†–ê–í–ò–¢–¨",callback_data="ADMSend")
            but_2 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
            key.add(but_1)
            key.add(but_2)
            if users[message.chat.id]['distribution']['picture'] == '':
                bot.edit_message_text(chat_id = message.chat.id, message_id = users[message.chat.id]['msg_id1'], text = str(users[message.chat.id]['distribution']['text']), parse_mode = 'HTML')
                bot.reply_to(message, text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞?', parse_mode = 'HTML', reply_markup=key)

            else:
                bot.send_photo(message.chat.id, photo = users[message.chat.id]['distribution']['picture'], caption = str(users[message.chat.id]['distribution']['text']), parse_mode = 'HTML')
                bot.reply_to(message, text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞?', parse_mode = 'HTML', reply_markup=key)

    if users[message.chat.id]['distribution']['action'] == 'Check_text' and users[message.chat.id]['status'] == 'owner' or users[message.chat.id]['distribution']['action'] == 'Check_text' and users[message.chat.id]['status'] == 'admin':
        try:
            bot.edit_message_reply_markup(message.chat.id, users[message.chat.id]['msg_id1'], reply_markup = '')
        except:
            pass
        try:
            users[message.chat.id]['distribution']['text'] = message.text
            bot.send_message(1007846976, users[message.chat.id]['distribution']['text'], parse_mode= 'HTML')
            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="–ë–µ–∑ –∫–Ω–æ–ø–æ–∫",callback_data="No_but")
            key.add(but_1)
            users[message.chat.id]['msg_id1'] = bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–∏—à–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - —Å—Å—ã–ª–∫–∞</code>\n\n(–∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)", parse_mode= 'HTML', reply_markup=key).message_id
            qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
            cursor.execute(qw)
            db.commit()
            users[message.chat.id]['distribution']['action'] = 'Check_buttons'
        except Exception as e:
            bot.send_message(message.chat.id, '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ HTML, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n\n<code>' + str(e) + '</code>\n\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç, —Å–æ–æ–±—â–∏ @Garison_777', parse_mode = 'HTML')


    if message.text == '–ê–¥–º–∏–Ω–∫–∞' and users[message.chat.id]['status'] == 'owner' and users[message.chat.id]['action'] == '' or message.text == '–ê–¥–º–∏–Ω–∫–∞' and users[message.chat.id]['status'] == 'admin' and users[message.chat.id]['action'] == '':
        key = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        key.row('–†–∞—Å—Å—ã–ª–∫–∞')
        if users[message.chat.id]['status'] == 'owner':
            key.row('‚ö°Ô∏è–ú–û–õ–û–¢ –¢–û–†–ê‚ö°Ô∏è')
        key.row('–Ω–∞–∑–∞–¥')
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup = key)

    if message.text == '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' and users[message.chat.id]['action'] == '':

        users[message.chat.id]['msg_id1'] = ''
        users[message.chat.id]['msg_id2'] = ''

        delta = datetime.timedelta(seconds = 30)
        now = datetime.datetime.now()
        global before
        users[message.chat.id]['msg_id1'] = bot.send_message(message.chat.id, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 —Å–µ–∫—É–Ω–¥...').message_id
        qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
        cursor.execute(qw)
        db.commit()
        if before + delta >= now:

            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(wait_time(3))
            loop.close()

            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="‚Üª", callback_data="Overload")
            key.add(but_1)
            users[message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=message.chat.id, message_id=users[message.chat.id]['msg_id1'], text=get_stat(0, 'stat'), reply_markup = key, parse_mode= 'HTML').message_id
            qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
            cursor.execute(qw)
            db.commit()

        else:
            before = datetime.datetime.now()

            bot.send_message(1007846976, 'Overload')

            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(wait_time(9))
            loop.close()

            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="‚Üª", callback_data="Overload")
            key.add(but_1)
            users[message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=message.chat.id, message_id=users[message.chat.id]['msg_id1'], text=get_stat(0, 'stat'), reply_markup = key, parse_mode= 'HTML').message_id
            qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
            cursor.execute(qw)
            db.commit()

            before = datetime.datetime.now()

    if users[message.chat.id]['action'] == 'price':
        if message.text.isdigit() and int(message.text) <= 10000 and int(message.text) >= 1:

            delta = datetime.timedelta(seconds = 30)
            now = datetime.datetime.now()
            users[message.chat.id]['msg_id1'] = bot.send_message(message.chat.id, '–ò–¥–µ—Ç —Ä–∞—Å—á–µ—Ç, –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 —Å–µ–∫—É–Ω–¥...').message_id
            qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
            cursor.execute(qw)
            db.commit()
            if before + delta >= now:

                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(wait_time(3))
                loop.close()

                users[message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=message.chat.id, message_id=users[message.chat.id]['msg_id1'], text=get_stat(int(message.text), 'price'), parse_mode= 'HTML').message_id
                qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
                cursor.execute(qw)
                db.commit()
            else:
                before = datetime.datetime.now()

                bot.send_message(1007846976, 'Overload')

                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(wait_time(9))
                loop.close()

                users[message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=message.chat.id, message_id=users[message.chat.id]['msg_id1'], text=get_stat(int(message.text), 'price'), parse_mode= 'HTML').message_id
                qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id1'], message.chat.id)
                cursor.execute(qw)
                db.commit()

                before = datetime.datetime.now()

            users[message.chat.id]['action'] = ''
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:')

    if message.text == '–°—Ç–æ–∏–º–æ—Å—Ç—å' and users[message.chat.id]['action'] == '':
        key = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        key.row('–Ω–∞–∑–∞–¥')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Ä–∞—Å—á–µ—Ç–Ω—É—é —á–µ–Ω—É –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (CPM):', reply_markup = key)
        users[message.chat.id]['action'] = 'price'


@bot.callback_query_handler(func=lambda c:True)
def inline(c):
    global users
    if c.message.chat.id not in users.keys():
        qw = "SELECT distinct `user_id` FROM `users` where `user_id` = %d"%(c.message.chat.id)
        cursor.execute(qw)
        result = cursor.fetchall()
        if len(result) != 0:
            qw = "SELECT distinct `status` FROM `users` WHERE `user_id` = %d"%(c.message.chat.id)
            cursor.execute(qw)
            status = cursor.fetchall()[0][0]
            qw = "SELECT distinct `msg_id1` FROM `users` WHERE `user_id` = %d"%(c.message.chat.id)
            cursor.execute(qw)
            msg_id1 = cursor.fetchall()[0][0]
            qw = "SELECT distinct `msg_id2` FROM `users` WHERE `user_id` = %d"%(c.message.chat.id)
            cursor.execute(qw)
            msg_id2 = cursor.fetchall()[0][0]

            users[c.message.chat.id] = {'action': '', 'status': status, 'msg_id1': msg_id1, 'msg_id2': msg_id2, 'distribution': {'action': '', 'text': '', 'picture': '', 'buttons': '', 'success': 0, 'fail': 0}}
        else:
            qw = """INSERT INTO `ProfitBot`.`users` (`id`, `user_id`, `msg_id1`, `msg_id2`) VALUES( NULL, %d, 0, 0)""" %(c.message.chat.id)
            cursor.execute(qw)
            db.commit()
            users[c.message.chat.id] = {'action': '', 'status': 'member', 'msg_id1': 0, 'msg_id2': 0, 'distribution': {'action': '', 'text': '', 'picture': '', 'buttons': '', 'success': 0, 'fail': 0}}

    if c.data == 'Adm_list' and users[c.message.chat.id]['status'] == 'owner':
        qw = "SELECT `user_id`, `status` FROM `users` WHERE `status` <> 'member'"
        cursor.execute(qw)
        result = cursor.fetchall()
        adm_list = '–í—Å–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:'
        for item in result:
            adm_list += '\n' + str(item[0]) + ' - ' + str(item[1])
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id1'], text=adm_list)

    if c.data == 'Without_text' and users[c.message.chat.id]['status'] == 'owner' or c.data == 'Without_text' and users[c.message.chat.id]['status'] == 'admin':
        users[c.message.chat.id]['msg_id1'] = bot.send_message(c.message.chat.id, "–ü—Ä–∏—à–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - —Å—Å—ã–ª–∫–∞</code>\n\n(–∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)", parse_mode= 'HTML').message_id
        qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
        cursor.execute(qw)
        db.commit()
        users[c.message.chat.id]['distribution']['action'] = 'Check_buttons'

    if c.data == "ADMPhoto" and users[c.message.chat.id]['status'] == 'owner' or c.data == "ADMPhoto" and users[c.message.chat.id]['status'] == 'admin':
        key = types.InlineKeyboardMarkup()
        but_1 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
        key.add(but_1)
        users[c.message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id = c.message.chat.id, message_id = users[c.message.chat.id]['msg_id1'], text = "–ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", reply_markup = key).message_id
        users[c.message.chat.id]['distribution']['action'] = 'Check_picture'
        qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
        cursor.execute(qw)
        db.commit()

    if c.data == "Lay_off_admin" and users[c.message.chat.id]['status'] == 'owner':
        key = types.InlineKeyboardMarkup()
        but_1 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
        key.add(but_1)
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id1'], text='–ö–æ–≥–æ —É–≤–æ–ª–∏—à—å?', reply_markup = key)
        users[c.message.chat.id]['action'] = 'Lay_off_admin'

    if c.data.find("Upgrade_admin") != -1 and users[c.message.chat.id]['status'] == 'owner':
        qw = """UPDATE `users` SET `status` = 'admin'  WHERE `user_id` = %d """ %(int(c.data[13:]))
        cursor.execute(qw)
        db.commit()
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id1'], text=str(c.data[13:]) + ' –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        bot.send_message(int(c.data[13:]), '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ß—Ç–æ –±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start')
        users[c.message.chat.id]['action'] = ''

    if c.data == 'ADMSend' and users[c.message.chat.id]['status'] == 'owner' or c.data == 'ADMSend' and users[c.message.chat.id]['status'] == 'admin':
        bot.delete_message(chat_id = c.message.chat.id, message_id = c.message.message_id)
        bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text="–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å‚è≥")
        qw = "SELECT `user_id` FROM `users`"
        cursor.execute(qw)
        result = cursor.fetchall()
        names = []
        urls = []
        print(users[c.message.chat.id]['distribution']['buttons'])
        if users[c.message.chat.id]['distribution']['buttons'] != '':
            for pare in users[c.message.chat.id]['distribution']['buttons'].split('\n'):
                try:
                    names.append(pare.split(' - ')[0])
                    urls.append(pare.split(' - ')[1])
                    key = types.InlineKeyboardMarkup()
                    for name, url in zip(names, urls):
                        key.add(types.InlineKeyboardButton(text = name, url = url))
                except:
                    bot.send_message(c.message.chat.id, '–í–µ—Ä–æ—è—Ç–Ω–æ, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏((\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å, —Å–æ–æ–±—â–∏—Ç–µ @Garison_777')
        else:
            key = ''

        for user_id in result:
            if user_id[0] != c.message.chat.id:

                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(wait_time(0.04))
                loop.close()
                try:
                    if users[c.message.chat.id]['distribution']['picture'] != '':
                        bot.send_photo(user_id[0], photo = users[c.message.chat.id]['distribution']['picture'], caption = users[c.message.chat.id]['distribution']['text'], parse_mode = 'HTML', reply_markup=key)
                    else:
                        bot.send_message(user_id[0], users[c.message.chat.id]['distribution']['text'], parse_mode = 'HTML', reply_markup=key)
                    users[c.message.chat.id]['distribution']['success'] += 1
                except Exception as e:
                    bot.send_message(c.message.chat.id, e)
                    users[c.message.chat.id]['distribution']['fail'] += 1

        bot.send_message(c.message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: <b>%d</b> - <b>%d</b>&#37;\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: <b>%d</b> - <b>%d</b>&#37;\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: <b>%d</b>'%(users[c.message.chat.id]['distribution']['success']+1, round((users[c.message.chat.id]['distribution']['success']+1)/len(result)*100, 1), users[c.message.chat.id]['distribution']['fail'], round(users[c.message.chat.id]['distribution']['fail']/len(result)*100, 1), len(result)), parse_mode = 'HTML')
        users[c.message.chat.id]['distribution']['success'] = 0
        users[c.message.chat.id]['distribution']['fail'] = 0



    if c.data == 'Set_admin' and users[c.message.chat.id]['status'] == 'owner':
        key = types.InlineKeyboardMarkup()
        but_1 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
        key.add(but_1)
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id1'], text='–ö–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∏—à—å?', reply_markup = key)
        users[c.message.chat.id]['action'] = 'Set_admin'

    if c.data == 'No_but' and users[c.message.chat.id]['status'] == 'owner' and users[c.message.chat.id]['action'] == '' or c.data == 'No_but' and users[c.message.chat.id]['status'] == 'admin' and users[c.message.chat.id]['action'] == '':
        users[c.message.chat.id]['distribution']['action'] = ''
        users[c.message.chat.id]['distribution']['buttons'] == 'None'
        users[c.message.chat.id]['distribution']['buttons'] == 'None'
        key = types.InlineKeyboardMarkup()
        but_1 = types.InlineKeyboardButton(text="–û–¢–ü–†–ê–í–ò–¢–¨",callback_data="ADMSend")
        but_2 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
        key.add(but_1)
        key.add(but_2)
        if users[c.message.chat.id]['distribution']['picture'] == '':
            bot.edit_message_text(chat_id = c.message.chat.id, message_id = users[c.message.chat.id]['msg_id1'], text = str(users[c.message.chat.id]['distribution']['text']), parse_mode = 'HTML')
            bot.reply_to(c.message, text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞?', parse_mode = 'HTML', reply_markup=key)

        else:
            bot.send_photo(c.message.chat.id, photo = users[c.message.chat.id]['distribution']['picture'], caption = str(users[c.message.chat.id]['distribution']['text']), parse_mode = 'HTML')
            bot.reply_to(c.message, text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞?', parse_mode = 'HTML', reply_markup=key)

    if c.data == 'ADMText' and users[c.message.chat.id]['status'] == 'owner' and users[c.message.chat.id]['action'] == '' or c.data == 'ADMText' and users[c.message.chat.id]['status'] == 'admin' and users[c.message.chat.id]['action'] == '':
        key = types.InlineKeyboardMarkup()
        but_1 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
        key.add(but_1)
        users[c.message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id = c.message.chat.id, message_id = users[c.message.chat.id]['msg_id1'], text = "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é HTML)", reply_markup=key).message_id
        qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
        cursor.execute(qw)
        db.commit()
        users[c.message.chat.id]['distribution']['action'] = 'Check_text'

    if c.data == 'ADMStop' and users[c.message.chat.id]['status'] == 'owner' or c.data == 'ADMStop' and users[c.message.chat.id]['status'] == 'admin':
        users[c.message.chat.id] = {'action': '', 'status': users[c.message.chat.id]['status'], 'msg_id1': 0, 'msg_id2': 0, 'distribution': {'action': '', 'text': '', 'picture': '', 'buttons': '', 'success': 0, 'fail': 0}}
        bot.delete_message(chat_id = c.message.chat.id, message_id = c.message.message_id)
        key = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        key.row('–†–∞—Å—Å—ã–ª–∫–∞')
        if users[c.message.chat.id]['status'] == 'owner':
            key.row('‚ö°Ô∏è–ú–û–õ–û–¢ –¢–û–†–ê‚ö°Ô∏è')
        key.row('–Ω–∞–∑–∞–¥')
        bot.send_message(c.message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=key)

    if c.data == "Overload" and users[c.message.chat.id]['action'] == '':
        now = datetime.datetime.now()
        global before
        delta = datetime.timedelta(seconds = 30)
        if users[c.message.chat.id]['msg_id2'] != '':
            try:
                users[c.message.chat.id]['msg_id1'] = bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id1'], reply_markup = '').message_id
                qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
                cursor.execute(qw)
                db.commit()

                users[c.message.chat.id]['msg_id2'] = bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id2'], text='–ó–∞–≥—Ä—É–∑–∫–∞...').message_id
                qw = """UPDATE `users` SET `msg_id2` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id2'], c.message.chat.id)
                cursor.execute(qw)
                db.commit()

            except:
                pass

        else:
            try:
                users[c.message.chat.id]['msg_id1'] = bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id1'], reply_markup = '').message_id
                qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
                cursor.execute(qw)
                db.commit()
            except:
                pass
            users[c.message.chat.id]['msg_id2'] = bot.send_message(c.message.chat.id, text='–ó–∞–≥—Ä—É–∑–∫–∞...').message_id
            qw = """UPDATE `users` SET `msg_id2` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id2'], c.message.chat.id)
            cursor.execute(qw)
            db.commit()

        if before + delta < now:
            before = datetime.datetime.now()

            bot.send_message(1007846976, 'Overload')

            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(wait_time(9))
            loop.close()

            bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text="–û–±–Ω–æ–≤–ª–µ–Ω–æ‚úÖ")

            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="‚Üª", callback_data="Overload")
            key.add(but_1)

            if users[c.message.chat.id]['msg_id1'] != '' and users[c.message.chat.id]['msg_id2'] != '':
                try:
                    if users[c.message.chat.id]['msg_id1'].text != get_stat(0, 'stat'):
                        users[c.message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id1'], text=get_stat(0, 'stat'), reply_markup = key, parse_mode= 'HTML').message_id
                        qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
                        cursor.execute(qw)
                        db.commit()
                except:
                    users[c.message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id1'], text=get_stat(0, 'stat'), reply_markup = key, parse_mode= 'HTML').message_id
                    qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
                    cursor.execute(qw)
                    db.commit()
                users[c.message.chat.id]['msg_id2'] = bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id2'], text='–û–±–Ω–æ–≤–ª–µ–Ω–æ!').message_id
                qw = """UPDATE `users` SET `msg_id2` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id2'], c.message.chat.id)
                cursor.execute(qw)
                db.commit()

            else:
                try:
                    if users[c.message.chat.id]['msg_id1'].text != get_stat(0, 'stat'):
                        users[c.message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id2'], text=get_stat(0, 'stat'), reply_markup = key, parse_mode= 'HTML').message_id
                        qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
                        cursor.execute(qw)
                        db.commit()
                except:
                    users[c.message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id2'], text=get_stat(0, 'stat'), reply_markup = key, parse_mode= 'HTML').message_id
                    qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
                    cursor.execute(qw)
                    db.commit()
                users[c.message.chat.id]['msg_id2'] = bot.send_message(c.message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–æ!').message_id
                qw = """UPDATE `users` SET `msg_id2` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id2'], c.message.chat.id)
                cursor.execute(qw)
                db.commit()

            before = datetime.datetime.now()
        else:

            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(wait_time(3))
            loop.close()

            bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text="–û–±–Ω–æ–≤–ª–µ–Ω–æ‚úÖ")

            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="‚Üª", callback_data="Overload")
            key.add(but_1)

            if users[c.message.chat.id]['msg_id1'] != '' and users[c.message.chat.id]['msg_id2'] != '':
                try:
                    users[c.message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id1'], text=get_stat(0, 'stat'), reply_markup = key, parse_mode= 'HTML').message_id
                    qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
                    cursor.execute(qw)
                    db.commit()

                except:
                    pass
                users[c.message.chat.id]['msg_id2'] = bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id2'], text='–û–±–Ω–æ–≤–ª–µ–Ω–æ!').message_id
                qw = """UPDATE `users` SET `msg_id2` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id2'], c.message.chat.id)
                cursor.execute(qw)
                db.commit()

            else:
                try:
                    users[c.message.chat.id]['msg_id1'] = bot.edit_message_text(chat_id=c.message.chat.id, message_id=users[c.message.chat.id]['msg_id2'], text=get_stat(0, 'stat'), reply_markup = key, parse_mode= 'HTML').message_id
                    qw = """UPDATE `users` SET `msg_id1` = %d  WHERE `user_id` = %d """ %(users[c.message.chat.id]['msg_id1'], c.message.chat.id)
                    cursor.execute(qw)
                    db.commit()

                except:
                    pass
                users[c.message.chat.id]['msg_id2'] = bot.send_message(c.message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–æ!').message_id
                qw = """UPDATE `users` SET `msg_id2` = %d  WHERE `user_id` = %d """ %(users[message.chat.id]['msg_id2'], c.message.chat.id)
                cursor.execute(qw)
                db.commit()


@bot.message_handler(content_types=['photo'])
def handle_docs_photo(message):
    global users
    bot.edit_message_reply_markup(message.chat.id, users[message.chat.id]['msg_id1'], reply_markup = '')
    if users[message.chat.id]['distribution']['action'] == 'Check_picture' and users[message.chat.id]['status'] == 'owner' or users[message.chat.id]['distribution']['action'] == 'Check_picture' and users[message.chat.id]['status'] == 'admin':
        print('!')
        try:
            users[message.chat.id]['distribution']['picture'] = message.photo[0].file_id
            bot.reply_to(message,"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ‚úÖ")
            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(text="–±–µ–∑ —Ç–µ–∫—Å—Ç–∞",callback_data="Without_text")
            but_2 = types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞",callback_data="ADMStop")
            key.add(but_1)
            key.add(but_2)
            users[message.chat.id]['msg_id1'] = bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é HTML)", reply_markup=key)
            users[message.chat.id]['distribution']['action'] = 'Check_text'
        except Exception as e:
            bot.reply_to(message, str(e) + '\n\n–ü—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, —Å–æ–æ–±—â–∏ @Garison_777')



# –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º)
bot.remove_webhook()

 # –°—Ç–∞–≤–∏–º –∑–∞–Ω–æ–≤–æ –≤–µ–±—Ö—É–∫
bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
                certificate=open(WEBHOOK_SSL_CERT, 'r'))

# –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ CherryPy
cherrypy.config.update({
    'server.socket_host': WEBHOOK_LISTEN,
    'server.socket_port': WEBHOOK_PORT,
    'server.ssl_module': 'builtin',
    'server.ssl_certificate': WEBHOOK_SSL_CERT,
    'server.ssl_private_key': WEBHOOK_SSL_PRIV
})

 # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø—É—Å–∫!
cherrypy.quickstart(WebhookServer(), WEBHOOK_URL_PATH, {'/': {}})





# bot.polling(none_stop=True)

